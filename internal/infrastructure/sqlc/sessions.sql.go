// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: sessions.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createSession = `-- name: CreateSession :exec

INSERT INTO user_sessions (id, user_id, refresh_token_hash, ip_address, user_agent, expires_at, created_at)
VALUES (?, ?, ?, ?, ?, ?, NOW())
`

type CreateSessionParams struct {
	ID               string         `db:"id" json:"id"`
	UserID           string         `db:"user_id" json:"user_id"`
	RefreshTokenHash string         `db:"refresh_token_hash" json:"refresh_token_hash"`
	IpAddress        sql.NullString `db:"ip_address" json:"ip_address"`
	UserAgent        sql.NullString `db:"user_agent" json:"user_agent"`
	ExpiresAt        time.Time      `db:"expires_at" json:"expires_at"`
}

// SQL queries for user session domain
func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) error {
	_, err := q.exec(ctx, q.createSessionStmt, createSession,
		arg.ID,
		arg.UserID,
		arg.RefreshTokenHash,
		arg.IpAddress,
		arg.UserAgent,
		arg.ExpiresAt,
	)
	return err
}

const deleteExpiredSessions = `-- name: DeleteExpiredSessions :exec
DELETE FROM user_sessions
WHERE expires_at <= NOW()
`

func (q *Queries) DeleteExpiredSessions(ctx context.Context) error {
	_, err := q.exec(ctx, q.deleteExpiredSessionsStmt, deleteExpiredSessions)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM user_sessions
WHERE id = ?
`

func (q *Queries) DeleteSession(ctx context.Context, id string) error {
	_, err := q.exec(ctx, q.deleteSessionStmt, deleteSession, id)
	return err
}

const getSessionByID = `-- name: GetSessionByID :one
SELECT id, user_id, refresh_token_hash, ip_address, user_agent, expires_at, created_at
FROM user_sessions
WHERE id = ? AND expires_at > NOW()
`

func (q *Queries) GetSessionByID(ctx context.Context, id string) (UserSessions, error) {
	row := q.queryRow(ctx, q.getSessionByIDStmt, getSessionByID, id)
	var i UserSessions
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshTokenHash,
		&i.IpAddress,
		&i.UserAgent,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getSessionByTokenHash = `-- name: GetSessionByTokenHash :one
SELECT id, user_id, refresh_token_hash, ip_address, user_agent, expires_at, created_at
FROM user_sessions
WHERE refresh_token_hash = ? AND expires_at > NOW()
`

func (q *Queries) GetSessionByTokenHash(ctx context.Context, refreshTokenHash string) (UserSessions, error) {
	row := q.queryRow(ctx, q.getSessionByTokenHashStmt, getSessionByTokenHash, refreshTokenHash)
	var i UserSessions
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshTokenHash,
		&i.IpAddress,
		&i.UserAgent,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getSessionByUserID = `-- name: GetSessionByUserID :many
SELECT id, user_id, refresh_token_hash, ip_address, user_agent, expires_at, created_at
FROM user_sessions
WHERE user_id = ? AND expires_at > NOW()
ORDER BY created_at DESC
`

func (q *Queries) GetSessionByUserID(ctx context.Context, userID string) ([]UserSessions, error) {
	rows, err := q.query(ctx, q.getSessionByUserIDStmt, getSessionByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserSessions
	for rows.Next() {
		var i UserSessions
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.RefreshTokenHash,
			&i.IpAddress,
			&i.UserAgent,
			&i.ExpiresAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
