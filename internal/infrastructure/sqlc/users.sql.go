// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :exec

INSERT INTO users (id, email, name, password_hash, is_active, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, NOW(), NOW())
`

type CreateUserParams struct {
	ID           string       `db:"id" json:"id"`
	Email        string       `db:"email" json:"email"`
	Name         string       `db:"name" json:"name"`
	PasswordHash string       `db:"password_hash" json:"password_hash"`
	IsActive     sql.NullBool `db:"is_active" json:"is_active"`
}

// SQL queries for user domain
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.exec(ctx, q.createUserStmt, createUser,
		arg.ID,
		arg.Email,
		arg.Name,
		arg.PasswordHash,
		arg.IsActive,
	)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE users
SET deleted_at = NOW(), updated_at = NOW()
WHERE id = ? AND deleted_at IS NULL
`

func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.exec(ctx, q.deleteUserStmt, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, name, password_hash, is_active, created_at, updated_at, deleted_at
FROM users
WHERE email = ? AND deleted_at IS NULL
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (Users, error) {
	row := q.queryRow(ctx, q.getUserByEmailStmt, getUserByEmail, email)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.PasswordHash,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, name, password_hash, is_active, created_at, updated_at, deleted_at
FROM users
WHERE id = ? AND deleted_at IS NULL
`

func (q *Queries) GetUserByID(ctx context.Context, id string) (Users, error) {
	row := q.queryRow(ctx, q.getUserByIDStmt, getUserByID, id)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.PasswordHash,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserCount = `-- name: GetUserCount :one
SELECT COUNT(*) as count
FROM users
WHERE deleted_at IS NULL
`

func (q *Queries) GetUserCount(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.getUserCountStmt, getUserCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, name, password_hash, is_active, created_at, updated_at, deleted_at
FROM users
WHERE deleted_at IS NULL
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type ListUsersParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]Users, error) {
	rows, err := q.query(ctx, q.listUsersStmt, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Users
	for rows.Next() {
		var i Users
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.PasswordHash,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET name = ?, email = ?, updated_at = NOW()
WHERE id = ? AND deleted_at IS NULL
`

type UpdateUserParams struct {
	Name  string `db:"name" json:"name"`
	Email string `db:"email" json:"email"`
	ID    string `db:"id" json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.exec(ctx, q.updateUserStmt, updateUser, arg.Name, arg.Email, arg.ID)
	return err
}
