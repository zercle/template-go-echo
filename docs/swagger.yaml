basePath: /
definitions:
  handler.ChangePasswordRequest:
    properties:
      new_password:
        maxLength: 128
        minLength: 8
        type: string
      old_password:
        type: string
    required:
    - new_password
    - old_password
    type: object
  handler.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  handler.LoginResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      refresh_token:
        type: string
      user:
        $ref: '#/definitions/handler.UserResponse'
    type: object
  handler.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  handler.RegisterRequest:
    properties:
      email:
        type: string
      name:
        maxLength: 255
        minLength: 1
        type: string
      password:
        maxLength: 128
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
  handler.TokenResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
    type: object
  handler.UpdateProfileRequest:
    properties:
      email:
        type: string
      name:
        maxLength: 255
        minLength: 1
        type: string
    required:
    - email
    - name
    type: object
  handler.UserListResponse:
    properties:
      limit:
        type: integer
      offset:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
      users:
        items:
          $ref: '#/definitions/handler.UserResponse'
        type: array
    type: object
  handler.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      name:
        type: string
      updated_at:
        type: string
    type: object
  infrastructure.HealthResponse:
    properties:
      service:
        type: string
      status:
        type: string
    type: object
  pkg.JSendResponse:
    properties:
      code:
        type: string
      data: {}
      message:
        type: string
      status:
        $ref: '#/definitions/pkg.JSendStatus'
    type: object
  pkg.JSendStatus:
    enum:
    - success
    - fail
    - error
    type: string
    x-enum-varnames:
    - StatusSuccess
    - StatusFail
    - StatusError
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: Production-ready Go Echo modular monolith template with clean architecture
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Go Echo Template API
  version: "1.0"
paths:
  /api/v1/users:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of users
      parameters:
      - description: 'Page limit (default: 10, max: 100)'
        in: query
        name: limit
        type: integer
      - description: 'Page offset (default: 0)'
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/pkg.JSendResponse'
            - properties:
                data:
                  $ref: '#/definitions/handler.UserListResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/pkg.JSendResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/pkg.JSendResponse'
      security:
      - BearerAuth: []
      summary: List users
      tags:
      - users
  /api/v1/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user account permanently
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pkg.JSendResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/pkg.JSendResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/pkg.JSendResponse'
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Retrieve a user account by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/pkg.JSendResponse'
            - properties:
                data:
                  $ref: '#/definitions/handler.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pkg.JSendResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/pkg.JSendResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/pkg.JSendResponse'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user name and email
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.UpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/pkg.JSendResponse'
            - properties:
                data:
                  $ref: '#/definitions/handler.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pkg.JSendResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/pkg.JSendResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/pkg.JSendResponse'
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - users
  /api/v1/users/{id}/password:
    post:
      consumes:
      - application/json
      description: Change user password with verification of old password
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Password change request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg.JSendResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pkg.JSendResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/pkg.JSendResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/pkg.JSendResponse'
      security:
      - BearerAuth: []
      summary: Change password
      tags:
      - users
  /api/v1/users/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return access/refresh tokens
      parameters:
      - description: Login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/pkg.JSendResponse'
            - properties:
                data:
                  $ref: '#/definitions/handler.LoginResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pkg.JSendResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/pkg.JSendResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/pkg.JSendResponse'
      summary: Login a user
      tags:
      - users
  /api/v1/users/logout:
    post:
      consumes:
      - application/json
      description: Invalidate current user session
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg.JSendResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/pkg.JSendResponse'
      security:
      - BearerAuth: []
      summary: Logout
      tags:
      - users
  /api/v1/users/logout-all:
    post:
      consumes:
      - application/json
      description: Invalidate all user sessions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pkg.JSendResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/pkg.JSendResponse'
      security:
      - BearerAuth: []
      summary: Logout all sessions
      tags:
      - users
  /api/v1/users/register:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: Registration request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/pkg.JSendResponse'
            - properties:
                data:
                  $ref: '#/definitions/handler.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pkg.JSendResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/pkg.JSendResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/pkg.JSendResponse'
      summary: Register a new user
      tags:
      - users
  /api/v1/users/token/refresh:
    post:
      consumes:
      - application/json
      description: Generate a new access token using refresh token
      parameters:
      - description: Refresh token request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/pkg.JSendResponse'
            - properties:
                data:
                  $ref: '#/definitions/handler.TokenResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pkg.JSendResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/pkg.JSendResponse'
      summary: Refresh token
      tags:
      - users
  /health:
    get:
      description: Basic health check endpoint
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infrastructure.HealthResponse'
      summary: Health check
  /live:
    get:
      description: Check if service is still alive
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infrastructure.HealthResponse'
      summary: Liveness check
  /ready:
    get:
      description: Check if service is ready to accept requests
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infrastructure.HealthResponse'
      summary: Readiness check
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
